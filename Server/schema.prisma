// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model Chapter {
  id       String  @id @default(cuid())
  title    String  @default("")
  desc     String  @default("")
  events   Event[] @relation("Chapter_events")
  author   User?   @relation("Chapter_author", fields: [authorId], references: [id])
  authorId String? @map("author")

  @@index([authorId])
}

model Event {
  id                 String    @id @default(cuid())
  title              String    @default("")
  chapter            Chapter[] @relation("Chapter_events")
  content            String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  slug               String    @unique @default("")
  eventImg_filesize  Int?
  eventImg_extension String?
  eventImg_width     Int?
  eventImg_height    Int?
  eventImg_id        String?
  eventStartDate     DateTime?
  author             User?     @relation("Event_author", fields: [authorId], references: [id])
  authorId           String?   @map("author")

  @@index([authorId])
}

model Post {
  id                  String    @id @default(cuid())
  title               String    @default("")
  content             String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  slug                String    @unique @default("")
  postImage_filesize  Int?
  postImage_extension String?
  postImage_width     Int?
  postImage_height    Int?
  postImage_id        String?
  publishDate         DateTime? @default(now())
  author              User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId            String?   @map("author")

  @@index([authorId])
}

model User {
  id       String    @id @default(cuid())
  name     String    @unique @default("")
  password String
  role     Role?     @relation("User_role", fields: [roleId], references: [id])
  roleId   String?   @map("role")
  events   Event[]   @relation("Event_author")
  posts    Post[]    @relation("Post_author")
  chapters Chapter[] @relation("Chapter_author")

  @@index([roleId])
}

model Role {
  id                String  @id @default(cuid())
  name              String  @default("")
  canCreateItems    Boolean @default(false)
  canManageAllItems Boolean @default(false)
  canSeeOtherUsers  Boolean @default(false)
  canEditOtherUsers Boolean @default(false)
  canManageUsers    Boolean @default(false)
  canManageRoles    Boolean @default(false)
  canUseAdminUI     Boolean @default(false)
  canReadChapters   Boolean @default(false)
  author            User[]  @relation("User_role")
}
